services:
    api:
        build:
            context: .
            dockerfile: .docker/api/Dockerfile
            target: frankenphp_prod
            args:
                VITE_API_BASE_URL: http://${DOMAIN_NAME}
        environment:
            APP_DEBUG: ${APP_DEBUG}
            # APP_RUNTIME: Runtime\\FrankenPhpSymfony\\Runtime
            MERCURE_PUBLISHER_JWT_KEY: ${CADDY_MERCURE_JWT_SECRET}
            MERCURE_SUBSCRIBER_JWT_KEY: ${CADDY_MERCURE_JWT_SECRET}
            TRUSTED_PROXIES: ${TRUSTED_PROXIES}
            TRUSTED_HOSTS: ^${DOMAIN_NAME}|localhost|api$$
            MERCURE_URL: http://api/.well-known/mercure
            MERCURE_PUBLIC_URL: ${CADDY_MERCURE_PUBLIC_URL}
            MERCURE_JWT_SECRET: ${CADDY_MERCURE_JWT_SECRET}
            DATABASE_URL: postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@${POSTGRES_HOST}:5432/${POSTGRES_DB}?serverVersion=${POSTGRES_VERSION}&charset=${POSTGRES_CHARSET}
            # See https://xdebug.org/docs/all_settings#mode
            XDEBUG_MODE: ${XDEBUG_MODE}
        # ports:
        #     # HTTP
        #     - target: 80
        #       published: ${HTTP_PORT:-80}
        #       protocol: tcp
        expose:
            - 80
        healthcheck:
            test: ["CMD", "curl", "-f", "http://localhost/healthz"]
            timeout: 5s
            retries: 5
            start_period: 60s
        networks:
            - monochrome-net
            - dokploy-network
        restart: unless-stopped
        tty: true
        extra_hosts:
            # Ensure that host.docker.internal is correctly defined on Linux
            - host.docker.internal:host-gateway
        labels:
            - traefik.enable=true
            - traefik.http.routers.monochrome-core.rule=Host(`${DOMAIN_NAME}`)
            - traefik.http.routers.monochrome-core.entrypoints=web
            - traefik.http.services.monochrome-core.loadbalancer.server.port=80

    database:
        image: postgres:16.8-bookworm
        environment:
            POSTGRES_DB: ${POSTGRES_DB:-app}
            # You should definitely change the password in production
            POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-ChangeMe}
            POSTGRES_USER: ${POSTGRES_USER:-app}
        healthcheck:
            test: ["CMD", "pg_isready", "-d", "${POSTGRES_DB:-app}", "-U", "${POSTGRES_USER:-app}"]
            timeout: 5s
            retries: 5
            start_period: 60s
        volumes:
            - db-data:/var/lib/postgresql/data:rw
        # You may use a bind-mounted host directory instead, so that it is harder to accidentally remove the volume and lose all your data!
        # - ./docker/db/data:/var/lib/postgresql/data:rw
        # ports:
        #     - 5432:5432        ###< doctrine/doctrine-bundle ###
        expose:
            - 5432
        networks:
            - monochrome-net
            - dokploy-network

    icecast:
        build:
            context: .
            dockerfile: .docker/icecast/Dockerfile
            args:
                ICECAST_ADMIN_USER: ${ICECAST_ADMIN_USER:-admin}
                ICECAST_ADMIN_PASSWORD: ${ICECAST_ADMIN_PASSWORD:-admin}
                ICECAST_ADMIN_EMAIL: ${ICECAST_ADMIN_EMAIL:-admin@localhost}
                ICECAST_HOSTNAME: ${ICECAST_HOSTNAME:-localhost}
                ICECAST_USER: ${ICECAST_USER:-user}
                ICECAST_PASSWORD: ${ICECAST_PASSWORD:-hackme}
        healthcheck:
            test: ["CMD", "curl", "-f", "http://localhost:8000/status.xsl"]
            timeout: 5s
            retries: 5
            start_period: 60s
        expose:
            - 8000
        networks:
            - monochrome-net
            - dokploy-network

networks:
    monochrome-net:
    dokploy-network:
        external: true

volumes:
    db-data:
